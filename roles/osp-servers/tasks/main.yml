---

# tasks file for osp.servers- name: Create new server instances and attaches them a network and passes metadata to the instance
- name: Create a frontend server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.frontend.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.frontend.meta[0]['group'] }},deployment_name={{ osp_servers.frontend.meta[0]['deployment_name'] }}"
    flavor: "{{ osp_servers.frontend.flavor }}"
    security_groups: "{{ osp_servers.frontend.security_group }}"
    state: present
    key_name: ansible_ssh
    auto_ip: yes
    wait: yes
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: web_server_ip

- name: Create first App server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.app1.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.app1.meta[0]['group'] }},deployment_name={{ osp_servers.app1.meta[0]['deployment_name'] }}"
    flavor: "{{ osp_servers.app1.flavor }}"
    security_groups: "{{ osp_servers.app1.security_group }}"
    state: present    
    key_name: ansible_ssh
    auto_ip: yes
    wait: yes
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: app_server1_ip

- name: Create second App server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.app2.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.app2.meta[0]['group'] }},deployment_name={{ osp_servers.app2.meta[0]['deployment_name'] }}"
    flavor: "{{ osp_servers.app2.flavor }}"
    security_groups: "{{ osp_servers.app2.security_group }}"
    state: present    
    key_name: ansible_ssh
    auto_ip: yes
    wait: yes
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: app_server2_ip

- name: Create Database server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.db.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.db.meta[0]['group'] }},deployment_name={{ osp_servers.db.meta[0]['deployment_name'] }}"
    flavor: "{{ osp_servers.db.flavor }}"
    security_groups: "{{ osp_servers.db.security_group }}"
    state: present    
    key_name: ansible_ssh
    auto_ip: yes
    wait: yes
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: db_server_ip    

- name: print output from os builds
  debug:
    msg: "{{item}}"
  loop:
    - "{{web_server_ip}}"
    - "{{app_server1_ip}}"
    - "{{app_server2_ip}}"
    - "{{db_server_ip}}"

- name: Add ext_network floating IP to frontend
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: frontend
    network: ext_network
    wait: true
    timeout: 180
  register: frontend_instancefloatingip

- name: Add ext_network floating IP to app1
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: app1
    network: ext_network
    wait: true
    timeout: 180
  register: app1_instancefloatingip

- name: Add ext_network floating IP to app2
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: app2
    network: ext_network
    wait: true
    timeout: 180
  register: app2_instancefloatingip

- name: Add ext_network floating IP to db
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: db
    network: ext_network
    wait: true
    timeout: 180
  register: db_instancefloatingip    

- name: Fetch Instance Info
  os_server_facts:
    cloud: ospcloud
    server: "*"
    filters:
      vm_state: active
  #register: result

- name: Show floating public IP
  debug:
    msg: "{{item}}"
  loop:
    - "{{frontend_instancefloatingip.floating_ip.floating_ip_address}}"
    - "{{app1_instancefloatingip.floating_ip.floating_ip_address}}"
    - "{{app2_instancefloatingip.floating_ip.floating_ip_address}}"
    - "{{db_instancefloatingip.floating_ip.floating_ip_address}}"  #.floating_ip.floating_ip_address
  
# - name: Wait for instances to be available
#   wait_for:
#     host: "{{ frontend_instancefloatingip.floating_ip.floating_ip_address }}"
#     port: 22
#     #search_regex: OpenSSH
#     timeout: 600
#   #delegate_to: "{{ inventory_hostname }}"

# - name: Wait for instances to be available
#   wait_for:
#     host: "{{ app1_instancefloatingip.floating_ip.floating_ip_address }}"
#     port: 22
#     #search_regex: OpenSSH
#     timeout: 600
#   #delegate_to: "{{ inventory_hostname }}"

# - name: Wait for instances to be available
#   wait_for:
#     host: "{{ app2_instancefloatingip.floating_ip.floating_ip_address }}"
#     port: 22
#     #search_regex: OpenSSH
#     timeout: 600
#   #delegate_to: "{{ inventory_hostname }}"

# - name: Wait for instances to be available
#   wait_for:
#     host: "{{ db_instancefloatingip.floating_ip.floating_ip_address }}"
#     port: 22
#     #search_regex: OpenSSH
#     timeout: 600
#   #delegate_to: "{{ inventory_hostname }}"

- name: Wait to be sure ssh is available
  pause:
    seconds: 30