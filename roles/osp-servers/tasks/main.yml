---

# tasks file for osp.servers- name: Create new server instances and attaches them a network and passes metadata to the instance
- name: Create a frontend server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.frontend.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.frontend.meta['group'] }},deployment_name={{ osp_servers.frontend.meta['deployment_name'] }}"
    flavor: "{{ osp_servers.frontend.flavor }}"
    security_groups: ICMP_and_SSH
    
    key_name: ansible_ssh
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: web_server_ip

- name: Create first App server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.app1.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.app1.meta['group'] }},deployment_name={{ osp_servers.app1.meta['deployment_name'] }}"
    flavor: "{{ osp_servers.app1.flavor }}"
    security_groups: ICMP_and_SSH
    key_name: ansible_ssh
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: app_server1_ip

- name: Create second App server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.app2.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.app2.meta['group'] }},deployment_name={{ osp_servers.app2.meta['deployment_name'] }}"
    flavor: "{{ osp_servers.app2.flavor }}"
    security_groups: ICMP_and_SSH
    key_name: ansible_ssh
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: app_server2_ip

- name: Create Database server instance
  os_server:
    cloud: ospcloud
    name: "{{ osp_servers.db.name }}"
    image: rhel-guest
    meta: "group={{ osp_servers.db.meta['group'] }},deployment_name={{ osp_servers.db.meta['deployment_name'] }}"
    flavor: "{{ osp_servers.db.flavor }}"
    security_groups: ICMP_and_SSH
    key_name: ansible_ssh
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: db_server_ip    


- name: set ostack_appname_list var
  set_fact:
    ostack_appname_list: "{{osp_servers | json_query('*')}}"

- name: Add floating IP to Servers
  os_floating_ip:
     cloud: ospcloud
     server: "{{ item.name }}"
  loop: "{{ostack_appname_list}}"

- name: Wait for server to be available
  wait_for:
      active_connection_states: ESTABLISHED,FIN_WAIT1,FIN_WAIT2,SYN_RECV,SYN_SENT,TIME_WAIT # not required. The list of TCP connection states which are counted as active connections.
      host: "{{ item.name }}" # not required. A resolvable hostname or IP address to wait for.
      connect_timeout: 5 # not required. Maximum number of seconds to wait for a connection to happen before closing and retrying.
      #delay: 0 # not required. Number of seconds to wait before starting to poll.
      state: present # not required. choices: absent;drained;present;started;stopped. Either C(present), C(started), or C(stopped), C(absent), or C(drained).,When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections.,When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing, C(absent) will check that file is absent or removed.
      sleep: 5 # not required. Number of seconds to sleep between checks, before 2.3 this was hardcoded to 1 second.
      timeout: 300 # not required. Maximum number of seconds to wait for, when used with another condition it will force an error.,When used without other conditions it is equivalent of just sleeping.
  loop: "{{ostack_appname_list}}"
