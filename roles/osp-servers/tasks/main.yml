---

# # tasks file for osp.servers- name: Create new server instances and attaches them a network and passes metadata to the instance
# - name: Create a frontend server instance
#   os_server:
#     cloud: ospcloud
#     name: "{{ osp_servers.frontend.name }}"
#     image: rhel-guest
#     meta: "group={{ osp_servers.frontend.meta['group'] }},deployment_name={{ osp_servers.frontend.meta['deployment_name'] }}"
#     flavor: "{{ osp_servers.frontend.flavor }}"
#     security_groups: frontend
#     key_name: ansible_ssh
#     auto_ip: yes
#     nics:
#     - net-name: int_network
#     userdata: |
#       #!/bin/bash
#       curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
#       cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
#       curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
#       cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
#   register: web_server_ip

# - name: Create first App server instance
#   os_server:
#     cloud: ospcloud
#     name: "{{ osp_servers.app1.name }}"
#     image: rhel-guest
#     meta: "group={{ osp_servers.app1.meta['group'] }},deployment_name={{ osp_servers.app1.meta['deployment_name'] }}"
#     flavor: "{{ osp_servers.app1.flavor }}"
#     security_groups: apps
#     key_name: ansible_ssh
#     auto_ip: yes
#     nics:
#     - net-name: int_network
#     userdata: |
#       #!/bin/bash
#       curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
#       cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
#       curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
#       cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
#   register: app_server1_ip

# - name: Create second App server instance
#   os_server:
#     cloud: ospcloud
#     name: "{{ osp_servers.app2.name }}"
#     image: rhel-guest
#     meta: "group={{ osp_servers.app2.meta['group'] }},deployment_name={{ osp_servers.app2.meta['deployment_name'] }}"
#     flavor: "{{ osp_servers.app2.flavor }}"
#     security_groups: apps
#     key_name: ansible_ssh
#     auto_ip: yes
#     nics:
#     - net-name: int_network
#     userdata: |
#       #!/bin/bash
#       curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
#       cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
#       curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
#       cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
#   register: app_server2_ip

# - name: Create Database server instance
#   os_server:
#     cloud: ospcloud
#     name: "{{ osp_servers.db.name }}"
#     image: rhel-guest
#     meta: "group={{ osp_servers.db.meta['group'] }},deployment_name={{ osp_servers.db.meta['deployment_name'] }}"
#     flavor: "{{ osp_servers.db.flavor }}"
#     security_groups: db
#     key_name: ansible_ssh
#     auto_ip: yes
#     nics:
#     - net-name: int_network
#     userdata: |
#       #!/bin/bash
#       curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
#       cat /tmp/openstack.pub &gt;&gt; /home/cloud-user/.ssh/authorized_keys
#       curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
#       cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
#   register: db_server_ip    

# - name: print output from os builds
#   debug:
#     var: "{{item}}"
#   loop:
#     - web_server_ip
#     - app_server1_ip
#     - app_server2_ip
#     - db_server_ip

- name: set ostackvars var
  set_fact:
    ostack_app_list: "{{osp_servers | json_query('*')}}"

- name: print ostack vars
  debug:
    msg: "{{item}}"
  loop: "{{ ostack_app_list }}"

- name: Create a server instance
  os_server:
    cloud: ospcloud
    name: "{{ current_host.name }}"
    image: "{{ current_host.image }}"
    meta: "group={{ current_host.meta.group }},deployment_name={{ current_host.meta.deployment_name }}"
    flavor: "{{current_host.flavor}}"
    security_groups: "{{ current_host.security_group }}"
    key_name: "{{current_host.key_name}}"
    wait: yes
    nics:
    - net-name: int_network
    userdata: |
      #!/bin/bash
      curl -o /tmp/openstack.pub http://www.opentlc.com/download/ansible_bootcamp/openstack_keys/openstack.pub
      cat /tmp/openstack.pub >> /home/cloud-user/.ssh/authorized_keys
      curl -o /tmp/internal.repo http://www.opentlc.com/download/ansible_bootcamp/repo/internal.repo
      cp /tmp/internal.repo /etc/yum.repos.d/internal.repo
  register: instanceips
  loop: "{{ ostack_app_list }}"
  loop_control:
    #index_var: current_index
    loop_var: current_host

- name: print out instanceips var
  debug:
    var: instanceips

- name: set ostack instance query
  set_fact:
    ostack_instance_query: instanceips.results[*].server[*].'hostname'

- name: set ostackvars var
  set_fact:
    ostack_instance_list: "{{instanceips.results | json_query(ostack_instance_query)}}"

- name: print ostack vars
  debug:
    msg: "{{item}}"
  loop: "{{ ostack_instance_list }}"

- name: Add floating IP to "{{ instance_name }}"
  os_floating_ip:
    cloud: ospcloud
    state: present
    reuse: yes
    server: "{{ instanceips.[current_index].name }}"
    network: ext_network
    wait: true
    timeout: 180
  register: instancefloatingips
  loop: "{{ ostack_instance_list }}"
  loop_control:
    index_var: current_index
    loop_var: current_host

- name: Show "{{ instanceips }}" public IP
  debug: var=instancefloatingips.floating_ip.floating_ip_address
  
- name: Wait for "{{ instance_name }}" to be available
  wait_for:
    host: "{{ instancefloatingips[current_ip].floating_ip.floating_ip_address }}"
    port: 22
    search_regex: OpenSSH
    timeout: 600
  delegate_to: "{{ inventory_hostname }}"
  loop: "{{ instancefloatingips }}"
  loop_control:
    index_var: current_index
    loop_var: current_ip

# - name: set ostack_appname_list var
#   set_fact:
#     ostack_appname_list: "{{osp_servers | json_query('*')}}"

# - name: Add floating IP to Servers
#   os_floating_ip:
#      cloud: ospcloud
#      server: "{{ item.name }}"
#   loop: "{{ostack_appname_list}}"



# - name: Check the instances status
#   wait_for:
#     host: "{{ item }}"
#     port: 22
#     #search_regex: OpenSSH
#     timeout: 600
#   #delegate_to: localhost
#   loop: #"{{ostack_appname_list}}"
#     - frontend
#     - app1
#     - app2
#     - db